{"version":3,"sources":["serviceWorker.js","components/Highlights.jsx","pages/Home.jsx","pages/About.jsx","pages/Contact.jsx","pages/Projects.jsx","pages/UnknownPage.jsx","Routes.js","components/Navigation.jsx","components/Header.jsx","components/Footer.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Highlights","props","carouselItems","highlights","forEach","highlight","index","button","link","react_default","a","createElement","Button","variant","size","as","NavLink","to","push","Carousel","Item","key","className","src","imgSrc","alt","imgAlt","Caption","style","fontWeight","content","Home","components_Highlights","Projects","Contact","UnknownPage","Routes","react_router","exact","path","component","About","Navigation","items","routes","route","NavItem","Nav","Link","name","Navbar","width","textAlign","expand","sticky","Brand","brand","Toggle","aria-controls","Collapse","id","defaultActiveKey","Header","components_Navigation","title","Footer","App","Container","components_Header","src_Routes","components_Footer","Component","ReactDOM","render","react_router_dom","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.89bafc9a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { Carousel, Button } from 'react-bootstrap';\r\n\r\nconst Highlights = props => {\r\n\tlet carouselItems = [];\r\n\tif (props.highlights) {\r\n\t\tprops.highlights.forEach(function(highlight, index) {\r\n\t\t\tlet button = null;\r\n\t\t\tif (highlight.link) {\r\n\t\t\t\tbutton = (\r\n\t\t\t\t\t<Button\r\n\t\t\t\t\t\tvariant='info'\r\n\t\t\t\t\t\tsize='sm'\r\n\t\t\t\t\t\tas={NavLink}\r\n\t\t\t\t\t\tto={highlight.link}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tLearn more...\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\tcarouselItems.push(\r\n\t\t\t\t<Carousel.Item key={index}>\r\n\t\t\t\t\t<img\r\n\t\t\t\t\t\tclassName='d-block w-100'\r\n\t\t\t\t\t\tsrc={highlight.imgSrc}\r\n\t\t\t\t\t\talt={highlight.imgAlt}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<Carousel.Caption>\r\n\t\t\t\t\t\t<div style={{ fontWeight: 'bold' }}>\r\n\t\t\t\t\t\t\t{highlight.content}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t{button}\r\n\t\t\t\t\t</Carousel.Caption>\r\n\t\t\t\t</Carousel.Item>\r\n\t\t\t);\r\n\t\t});\r\n\t}\r\n\treturn props.highlights ? (\r\n\t\t<div>\r\n\t\t\t<Carousel>{carouselItems}</Carousel>\r\n\t\t</div>\r\n\t) : null;\r\n};\r\n\r\nexport default Highlights;\r\n","import React from 'react';\r\nimport Highlights from '../components/Highlights';\r\n\r\nconst Home = () => (\r\n\t<div>\r\n\t\t<Highlights\r\n\t\t\thighlights={[\r\n\t\t\t\t{\r\n\t\t\t\t\timgSrc: './res/img/red.jpg',\r\n\t\t\t\t\timgAlt: 'red',\r\n\t\t\t\t\tcontent: 'RED',\r\n\t\t\t\t\tlink: './about'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\timgSrc: './res/img/green.jpg',\r\n\t\t\t\t\timgAlt: 'green',\r\n\t\t\t\t\tcontent: 'GREEN',\r\n\t\t\t\t\tlink: './contact'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\timgSrc: './res/img/blue.jpg',\r\n\t\t\t\t\timgAlt: 'blue',\r\n\t\t\t\t\tcontent: 'BLUE',\r\n\t\t\t\t\tlink: './projects'\r\n\t\t\t\t}\r\n\t\t\t]}\r\n\t\t/>\r\n\t\t<h1 className='App-Header'>Who Am I?</h1>\r\n\t</div>\r\n);\r\n\r\nexport default Home;\r\n","import React from 'react';\r\n\r\nconst Projects = () => <div>Abouts page content</div>;\r\n\r\nexport default Projects;\r\n","import React from 'react';\r\n\r\nconst Contact = () => <div>Contact Page content</div>;\r\n\r\nexport default Contact;\r\n","import React from 'react';\r\n\r\nconst Projects = () => <div>Project's Page content</div>;\r\n\r\nexport default Projects;\r\n","import React from 'react';\n\nconst UnknownPage = () => <div>404 - Sorry this pages does not exist</div>;\n\nexport default UnknownPage;\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport Home from './pages/Home.jsx';\nimport About from './pages/About.jsx';\nimport Contact from './pages/Contact.jsx';\nimport Projects from './pages/Projects.jsx';\nimport UnknownPage from './pages/UnknownPage.jsx';\n\nconst Routes = () => (\n\t<main>\n\t\t<Switch>\n\t\t\t<Route exact path='/' component={Home} />\n\t\t\t<Route path='/about' component={About} />\n\t\t\t<Route path='/contact' component={Contact} />\n\t\t\t<Route path='/projects' component={Projects} />\n\t\t\t<Route component={UnknownPage} />\n\t\t</Switch>\n\t</main>\n);\n\nexport default Routes;\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { Navbar, Nav, NavItem } from 'react-bootstrap';\n\nconst Navigation = props => {\n\tlet items = [];\n\tif (props.routes) {\n\t\tprops.routes.forEach(function(route, index) {\n\t\t\titems.push(\n\t\t\t\t<NavItem key={index}>\n\t\t\t\t\t<Nav.Link as={NavLink} to={route.route} exact>\n\t\t\t\t\t\t{route.name}\n\t\t\t\t\t</Nav.Link>\n\t\t\t\t</NavItem>\n\t\t\t);\n\t\t});\n\t}\n\n\treturn props.routes ? (\n\t\t<Navbar\n\t\t\tclassName='mr-auto'\n\t\t\tstyle={{ width: '100%', textAlign: 'center' }}\n\t\t\texpand='md'\n\t\t\tsticky='top'\n\t\t>\n\t\t\t<Navbar.Brand>{props.brand}</Navbar.Brand>\n\t\t\t<Navbar.Toggle aria-controls='basic-navbar-nav' />\n\t\t\t<Navbar.Collapse id='basic-navbar-nav'>\n\t\t\t\t<Nav defaultActiveKey={props.routes[0]}> {items} </Nav>\n\t\t\t</Navbar.Collapse>\n\t\t</Navbar>\n\t) : null;\n};\n\nexport default Navigation;\n","import React from 'react';\r\nimport Navigation from './Navigation.jsx';\r\n\r\nconst Header = props => (\r\n\t<Navigation brand={props.title} routes={props.routes} />\r\n);\r\n\r\nexport default Header;\r\n","import React from 'react';\nimport '../style/App.css';\n\nconst Footer = () => <footer className='App-Footer'>Andrew Alford 2019</footer>;\n\nexport default Footer;\n","import React, { Component } from 'react';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport Routes from './Routes';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\n\nclass App extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<Container>\n\t\t\t\t<Header\n\t\t\t\t\ttitle={`Andrew's Portfolio`}\n\t\t\t\t\troutes={[\n\t\t\t\t\t\t{ name: 'Home', route: '/' },\n\t\t\t\t\t\t{ name: 'About', route: '/about' },\n\t\t\t\t\t\t{ name: 'Projects', route: '/projects' },\n\t\t\t\t\t\t{ name: 'Contact', route: '/contact' }\n\t\t\t\t\t]}\n\t\t\t\t/>\n\t\t\t\t<Routes />\n\t\t\t\t<Footer />\n\t\t\t</Container>\n\t\t);\n\t}\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter as Router } from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './style/index.css';\n\nReactDOM.render(\n\t<Router>\n\t\t<App />\n\t</Router>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}